Procedure Send(mtype: MessageType;
               src: Node;
               dst: Node;
               src: Cache;
               num: 1..10;);
var
  msg: Message;

begin

     msg.src:= Cache;
     msg.num:= 1..10;
      if vc = vcOrd11 | vc = vcOrd12 then
       Assert(ord1count[dst] < NET_MAX) "Too many msgs on ord1Q";
       ord1[dst][ord1count[dst]] := msg;
       ord1count[dst] := ord1count[dst] + 1;
     
      elsif vc = vcOrd21 then
       Assert(ord2count[dst] < NET_MAX) "Too many msgs on ord2Q";
       ord2[dst][ord2count[dst]] := msg;
       ord2count[dst] := ord2count[dst] + 1;
     
      else
       Assert (MultiSetCount(i:unord1[dst], true) < NET_MAX)"Too many messages";
       MultiSetAdd(msg, unord1[dst]);
     
      endif;

end;

procedure Advanceord1(n:Node);
begin
 Assert (ord1count[n] > 0) "Trying to advance empty Q";
 for i := 0 to ord1count[n]-1 do
  if i < ord1count[n]-1 then
   ord1[n][i] := ord1[n][i+1];
  else
   undefine ord1[n][i];
  endif;
 endfor;
 ord1count[n] := ord1count[n] - 1;
end;

procedure Advanceord2(n:Node);
begin
 Assert (ord2count[n] > 0) "Trying to advance empty Q";
 for i := 0 to ord2count[n]-1 do
  if i < ord2count[n]-1 then
   ord2[n][i] := ord2[n][i+1];
  else
   undefine ord2[n][i];
  endif;
 endfor;
 ord2count[n] := ord2count[n] - 1;
end;

procedure ErrorUnhandledMsg();
begin
  error "Unhandled message type!";
end;

procedure ErrorUnhandledState();
begin
  error "Unhandled state!";
end;
